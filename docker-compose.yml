version: '3.8'

services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: legal-analyzer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-analyzer-network

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: legal-analyzer-backend
    ports:
      - "8000:8000"
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - REDIS_URL=redis://redis:6379/0
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_ANALYSES=5
      - CACHE_RETENTION_HOURS=24
    volumes:
      - backend_logs:/app/logs
      - backend_exports:/app/exports
      - backend_temp:/app/temp_uploads
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - legal-analyzer-network
    restart: unless-stopped

  # Frontend web application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: legal-analyzer-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-analyzer-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: legal-analyzer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - legal-analyzer-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_exports:
    driver: local
  backend_temp:
    driver: local

networks:
  legal-analyzer-network:
    driver: bridge
